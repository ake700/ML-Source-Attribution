#!/usr/bin/env perl

use strict;
use warnings;
use Getopt::Long qw(GetOptions);
use Pod::Usage;

# collapse multiple variant sites with the same pattern (present/absent in the same isolates)
# assumes one line per variant for vcfs.

=head1  SYNOPSIS


 variants_to_patterns -i /path/to/vcf_file -o /path/to/output_file

 Input/Output:
 -i|--input		input vcf/table [required]
 -o|--output		output vcf/table [required]
 -c|--conversion		output conversion file [required]
 
 Filtering options:
 --fl|freq-low		min snp frequency to include in output 
			[default: 0.00]
 --fh|freq-high		max snp frequency to include in output 
			[default: 1.00]
 -l|--list 		list of samples to include [default: off]
			
 General:
 -h|--help		usage information
 
=cut

# switch buffer off 
$| = 1;

# variables
my $input = "";
my $output = "";
my $conversion = "";

my $l_threshold = 0.00;
my $h_threshold = 1;
my $list = '';

my $help = 0; 

GetOptions(

	'help|?' 	=> \$help,
	
	'input=s' 	=> \$input,
	'output=s'	=> \$output,
	'conversion=s' => \$conversion,
	
	'fl|freq-low=f' => \$l_threshold,
	'fh|freq-high=f' => \$h_threshold,

	'list=s' => \$list,

	
) or pod2usage(1);
pod2usage(1) if $help;
pod2usage( {-message => q{input vcf/table is a required arguement}, -exitval => 1, -verbose => 1 } ) if $input eq ''; 
pod2usage( {-message => q{output file is a required arguement}, -exitval => 1, -verbose => 1 } ) if $output eq ''; 
pod2usage( {-message => q{output conversion file is a required arguement}, -exitval => 1, -verbose => 1 } ) if $conversion eq ''; 

# [optional] open list file
my %list  = (); 
my $no_samples_list;
if ($list ne ''){
	open LIST, $list or die " - ERROR: could not open list ($list)\n";
	while (<LIST>){
	
		my $line = $_;
		chomp $line;
		
		my @vars = split(/\t/, $line, -1);
		
		$list {$vars[0]} = 1 unless $vars[0] eq "id";
		
	}close LIST;
	
	# feedback
	$no_samples_list = keys(%list); 
	print " - $no_samples_list samples to include from list file.\n";
}

# check input file format
my $vcf = 0;
$vcf = 1 if ( $input =~ /\.vcf$/);

# index column for presence absence 
my $ind = 1;
$ind = 9 if $vcf == 1;

# open output files
open OUTPUT, ">$output" or die " - ERROR: could not open output file.\n";
open CONV, ">$conversion" or die " - ERROR: could not open output conversion file.\n";

# parse input file
my $no_sites = 0;

my $pattern_count = 0;
my %patterns = ();
my %pattern_store = ();

my @headers = ();
my $no_samples = 0;
my @include = ();

my $line_count = 0;
open INPUT, $input or die " - ERROR: input file did not open.\n";
while(<INPUT>){
	
	$line_count++;
	
	my $l = $_;
	chomp $l;
	
	my @line = split(/\t/, $l, -1);
	
	# store headers
	if( ((/^#CHROM\tPOS/) && ($vcf == 1)) || ( ($line_count == 1) && ($vcf == 0))  ){	
				
		@headers = @line;
				
		# check for samples in list 
		if ($list ne ''){
			
			for my $t ( $ind..$#headers ){ 
				if ($list{$headers[$t]}){
					push(@include, $t);
					$list {$headers[$t]} = 2;
				}
			}
		
		}else{
			
			for my $t ( $ind..$#headers ){ push(@include, $t);}; 	
		
		}
		
		# list missing samples
		my @missing_samples = ();
		for ( keys %list ){
			push(@missing_samples, $_) if $list{$_} == 1;
		}
		print "missing samples:\n" if scalar(@missing_samples) > 0;
		print sprintf("%s\n", join("\n", @missing_samples)) if scalar(@missing_samples) > 0;
		
		# print reduced header
		my $headerline = "";
		if ($vcf == 1){
			$headerline = join("\t", @headers[0..8], @headers[@include]);
		}else{
			$headerline = join("\t", "id", @headers[@include]);
		}
		print OUTPUT "$headerline\n";
		
		# feedback
		$no_samples = @include; 
		if($list ne ""){
			print " - $no_samples samples of $no_samples_list found in vcf headers.\n";
		}else{
			print " - $no_samples samples found in vcf headers.\n";
		}
		print " - 0 variant sites processed.";
		
		# headers for conversion file 
		print CONV "\# $no_samples samples\npattern_id\tvar_count\tno_samples\tvariants\tfrequency\n";
				
	}
	elsif(/^#/){
		print OUTPUT "$l\n";
	}elsif(/^\S+\t/){
	
		$no_sites++;
		
		# sanity check
		die " - ERROR: No samples found in header line.\n" if $no_samples == 0;
		
		# variant id 
		my $id = $line[0];
		
		# make variant info for vcf file
		if ($vcf == 1){
		
			# variables
			my $chrom = $line[0];
			my $pos = $line[1];
			my $ref = uc($line[3]);
			my $alt = uc($line[4]);
			
			# check only one variant per line
			die " - only one variant per site expected - use expand_vcf\n" if ($alt =~ /,/);
			
			# replace alternative gap characters with n
			#$alt =~ s/\*|\-/N/g;
			#$ref =~ s/\*|\-/N/g;
			
			$id = sprintf("%s\_%s\_%s\_%s", $chrom, $pos, $alt, $ref);
		}
	 
		# only include isolates in list
		my @outline = (); 
			
		for my $t ( @include ){ 
			#print scalar @include, "\t", scalar(@line), "\t";
			#print "$t - $line[$t]\n";
			push( @outline, $line[$t] ); 
		}
	
		# make pattern
		my $pattern = join("", @outline);
	
		# check if pattern exists
		my $pattern_number = "";
		if (!$pattern_store{$pattern}){
			$pattern_count++;
			$pattern_store{$pattern} = $pattern_count;
			$pattern_number = $pattern_count;
		}else{
			$pattern_number = $pattern_store{$pattern};
		}
		
		# store variants per pattern
		$patterns{$pattern_number} {$id} = 1; 
		
		# feedback
		if ( $no_sites%1000 == 0 ){
			print "\r - $no_sites variant sites processed.";
		}
		
	}
			
}
close INPUT;
print "\r - $no_sites variant sites processed.\n";

# printing patterns
my $filtered = 0;
my %pattern_rev = reverse(%pattern_store);
for my $pc ( sort {$a<=>$b} keys %patterns ){
	
	# pattern
	my $p = $pattern_rev{$pc};
	my @sp = split(//, $p);
	
	# count samples
	my $s_count = 0;
	for (@sp){
		$s_count++ if $_ == 1;
	}
	
	# proportion of isolates pattern is found in
	my $freq = $s_count/$no_samples;
	
	# store variant/pattern if it is between frequency thresholds
	if ( ( $freq <= $h_threshold ) && ( $freq >= $l_threshold ) ){
	
		# print to variant file
		if ( $vcf == 1 ){
			my @add = ("0") x 7;
			print OUTPUT sprintf("1\t%s\t%s\t%s\n", $pc, join("\t", @add) , join("\t", @sp));
		}else{
			print OUTPUT sprintf("%s\t%s\n", $pc, join("\t", @sp));
		}
	
		# print to conversion file
		my @samples = keys( %{$patterns{$pc}} );
		print CONV sprintf("%s\t%s\t%i\t%s\t%.3f\n", $pc, $#samples+1, $s_count, join(",", @samples), $freq);
	
	}else{
		$filtered++;
	}
			
}
close OUTPUT;
close CONV;

# feedback
my $per_patterns = sprintf("%.3f", ($pattern_count/$no_sites) * 100);
my $per_filt = sprintf("%.3f", ($filtered/$pattern_count) * 100);
my $inc = ($pattern_count-$filtered);
my $per_inc = sprintf("%.3f", ($inc/$pattern_count) * 100);
print " - $no_sites variants in file.\n";
print " - $pattern_count patterns present ($per_patterns\%).\n";
print " - $inc/$pattern_count ($per_inc) patterns included in output file.\n";
print " - $filtered/$pattern_count ($per_filt\%) patterns filtered ($l_threshold-$h_threshold)\n";